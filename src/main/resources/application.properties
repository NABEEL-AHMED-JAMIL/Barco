# filter order for cors
security.oauth2.resource.filter-order=3
# this is used for the database
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost/barco
spring.datasource.username= root
spring.datasource.password=
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
spring.jpa.database-platform = org.hibernate.dialect.MySQL5Dialect
spring.datasource.schema=classpath:/sql/schema.sql
#spring.datasource.data=classpath:/sql/data.sql
# have two option first create and than after create used the update
spring.jpa.show-sql=true
spring.jpa.format_sql=true
spring.jpa.hibernate.ddl-auto=update

# Application specific
security.jwt.client-id=barco
security.jwt.client-secret=ballistic
security.jwt.grant-type-password=password
security.jwt.grant-type-refresh_token=refresh_token
security.jwt.grant-type-client-credentials=client-credentials
security.jwt.scope-read=read
security.jwt.scope-write=write
security.jwt.resource-ids=ballistic
# signing
security.signing-key=ballistic_barco
security.encoding-strength=256
security.security-realm=Spring Boot JWT Example Realm
#cache for qr-code
spring.cache.type=simple
#web server
server.port=9191
server.contextPath=/api
# reCaptch
#[2a00:1450:400c:c04::6a] replace with www.google.com
#74.125.206.104 replace with www.google.com
google.recaptcha.key.url=https://www.google.com/recaptcha/api/siteverify
google.recaptcha.key.secret=6Le3zkEUAAAAACYZS7ue0in1RM-UAGjwutkA0Qz4
google.recaptcha.key.site="6Le3zkEUAAAAAHWmmdTdoUiE11izsUH4iTqjJVSc